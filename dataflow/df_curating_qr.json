{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_adls_raw",
						"type": "LinkedServiceReference"
					},
					"name": "srcQR"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_adls_curated",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "split1"
				},
				{
					"name": "flatten1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     date as integer",
				"}",
				"source(output(",
				"          author as (reference as string),",
				"          authored as string,",
				"          contained as (id as string, identifier as (system as string, type as (text as string), value as string)[], intent as string, requester as (reference as string), resourceType as string, status as string, subject as (reference as string))[],",
				"          encounter as (reference as string),",
				"          id as short,",
				"          item as ({_linkId} as (fhir_comments as string[]), answer as (valueDateTime as string, valueDecimal as double, valueString as string)[], definition as string, item as (answer as (item as ({_linkId} as (fhir_comments as string[]), item as ({_linkId} as (fhir_comments as string[]), answer as (valueCoding as (code as boolean, system as string))[], linkId as string)[], linkId as string)[], valueCoding as (code as boolean, display as boolean, system as string))[], linkId as double)[], linkId as boolean, text as string)[],",
				"          meta as (lastUpdated as string, profile as string[], source as string, versionId as short),",
				"          resourceType as string,",
				"          source as (identifier as (value as short), type as string),",
				"          status as string,",
				"          text as (div as string, status as string)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'json',",
				"     fileSystem: 'fhir',",
				"     folderPath: 'fhir-dev.psi-mis.org/QuestionnaireResponse',",
				"     fileName: (concat(toString($date),'.json')),",
				"     documentForm: 'arrayOfDocuments') ~> srcQR",
				"srcQR select(mapColumn(",
				"          id,",
				"          item,",
				"          lastUpdated = meta.lastUpdated,",
				"          type = source.type,",
				"          patientId = source.identifier.value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split(type=='Patient',",
				"     disjoint: false) ~> split1@(isPatient, noPatient)",
				"split1@isPatient foldDown(unroll(item.answer),",
				"     mapColumn(",
				"          id,",
				"          lastUpdated,",
				"          patientId,",
				"          item = item.text,",
				"          answer = item.answer",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'fhir',",
				"     folderPath: (concat('fhir-dev.psi-mis.org/Patient/',toString($date))),",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}