{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-psi-fhir"
		},
		"tr_daily_10am_cet_properties_pl_execution_parameters_date": {
			"type": "string",
			"defaultValue": "formatDateTime(@trigger.startTime(), 'yyyymmdd')"
		},
		"tr_test_properties_pl_execution_parameters_date": {
			"type": "string",
			"defaultValue": "trigger.startTime()"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_qr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_prod",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "lastUpdated",
						"type": "date"
					},
					{
						"name": "patient_id",
						"type": "varchar"
					},
					{
						"name": "Action Type",
						"type": "varchar"
					},
					{
						"name": "CTA",
						"type": "varchar"
					},
					{
						"name": "Duration Seconds",
						"type": "varchar"
					},
					{
						"name": "Encounter",
						"type": "varchar"
					},
					{
						"name": "End DateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Locale",
						"type": "varchar"
					},
					{
						"name": "Location",
						"type": "varchar"
					},
					{
						"name": "Start DateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "",
					"table": "QuestionnaireResponse"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adls_curated",
								"type": "LinkedServiceReference"
							},
							"name": "srcQuestionnaire"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adls_development",
								"type": "LinkedServiceReference"
							},
							"name": "sinkQuestionnaire"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						},
						{
							"name": "unpivot1"
						},
						{
							"name": "select1"
						},
						{
							"name": "MapDrifted2",
							"description": "Creates an explicit mapping for each drifted column"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as short,",
						"          item as string,",
						"          lastUpdated as string,",
						"          patientId as short,",
						"          valueDateTime as string,",
						"          valueDecimal as string,",
						"          valueString as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fhir',",
						"     folderPath: 'fhir-dev.psi-mis.org/questionnaire_response',",
						"     fileName: 'part-00000-f1e34e0c-5eb5-4a34-9bbc-a16d2163d2ea-c000.json',",
						"     documentForm: 'documentPerLine') ~> srcQuestionnaire",
						"select1 pivot(groupBy(id,",
						"          lastUpdated,",
						"          patientId),",
						"     pivotBy(item),",
						"     {} = first(value),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"srcQuestionnaire unpivot(output(",
						"          valueType as string,",
						"          value as string",
						"     ),",
						"     ungroupBy(patientId,",
						"          item,",
						"          id,",
						"          lastUpdated),",
						"     lateral: true,",
						"     ignoreNullPivots: true) ~> unpivot1",
						"unpivot1 select(mapColumn(",
						"          patientId,",
						"          item,",
						"          value,",
						"          lastUpdated,",
						"          id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"pivot1 derive({Action Type} = toString(byName('Action Type')),",
						"          CTA = toString(byName('CTA')),",
						"          {Duration Seconds} = toString(byName('Duration Seconds')),",
						"          Encounter = toString(byName('Encounter')),",
						"          {End DateTime} = toString(byName('End DateTime')),",
						"          Locale = toString(byName('Locale')),",
						"          Location = toString(byName('Location')),",
						"          {Start DateTime} = toString(byName('Start DateTime'))) ~> MapDrifted2",
						"MapDrifted2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'fhir',",
						"     folderPath: 'fhir-dev.psi-mis.org/questionnaire_response',",
						"     truncate: true,",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true) ~> sinkQuestionnaire"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_curating_qr')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adls_raw",
								"type": "LinkedServiceReference"
							},
							"name": "srcQR"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adls_curated",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "split1"
						},
						{
							"name": "flatResult"
						},
						{
							"name": "GetQA"
						}
					],
					"scriptLines": [
						"parameters{",
						"     date as integer",
						"}",
						"source(output(",
						"          id as short,",
						"          item as (answer as (valueDateTime as string, valueDecimal as double, valueString as string)[], text as string)[],",
						"          meta as (lastUpdated as string, profile as string[], source as string, versionId as short),",
						"          resourceType as string,",
						"          source as (identifier as (value as short), type as string),",
						"          status as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fhir',",
						"     folderPath: 'fhir.psi-mis.org/QuestionnaireResponse',",
						"     fileName: (concat(toString($date),'.json')),",
						"     documentForm: 'arrayOfDocuments') ~> srcQR",
						"srcQR select(mapColumn(",
						"          id,",
						"          item,",
						"          lastUpdated = meta.lastUpdated,",
						"          type = source.type,",
						"          patientId = source.identifier.value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 split(type=='Patient',",
						"     disjoint: false) ~> split1@(isPatient, noPatient)",
						"GetQA foldDown(unroll(item.answer),",
						"     mapColumn(",
						"          id,",
						"          lastUpdated,",
						"          patientId,",
						"          item = item.text,",
						"          answer = item.answer",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatResult",
						"split1@isPatient foldDown(unroll(item),",
						"     mapColumn(",
						"          id,",
						"          item,",
						"          lastUpdated,",
						"          type,",
						"          patientId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> GetQA",
						"flatResult sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'fhir',",
						"     folderPath: (concat('fhir.psi-mis.org/QuestionnaireResponse/',toString($date))),",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          lastUpdated,",
						"          patientId,",
						"          item,",
						"          valueDateTime = answer.valueDateTime,",
						"          valueDecimal = answer.valueDecimal,",
						"          valueString = answer.valueString",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_patient')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adls_raw",
								"type": "LinkedServiceReference"
							},
							"name": "srcPatient"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adls_development",
								"type": "LinkedServiceReference"
							},
							"name": "sinkDevelopmentPatient"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "flattenIdentifier"
						},
						{
							"name": "pivot1"
						},
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "flatten2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          entry as (fullUrl as string, resource as (active as boolean, birthDate as date, communication as (language as (coding as (code as string, display as string, system as string)[], text as string), preferred as boolean)[], extension as (url as string, valueCodeableConcept as (coding as (code as string, system as string)[]))[], gender as string, id as short, identifier as (period as (start as string), system as string, use as string, value as string)[], meta as (lastUpdated as string, profile as string[], source as string, versionId as short), name as (family as string, given as string[], text as string, use as string)[], resourceType as string, telecom as (period as (start as string), system as string, use as string, value as string)[], text as (div as string, status as string)), search as (mode as string))[],",
						"          id as string,",
						"          link as (relation as string, url as string)[],",
						"          meta as (lastUpdated as string),",
						"          resourceType as string,",
						"          total as short,",
						"          type as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fhir',",
						"     folderPath: 'fhir-dev.psi-mis.org/patient',",
						"     fileName: '2022-07-31-patient.json',",
						"     documentForm: 'arrayOfDocuments') ~> srcPatient",
						"srcPatient foldDown(unroll(entry),",
						"     mapColumn(",
						"          birthDate = entry.resource.birthDate,",
						"          gender = entry.resource.gender,",
						"          id = entry.resource.id,",
						"          lastUpdated = entry.resource.meta.lastUpdated,",
						"          telecom = entry.resource.telecom,",
						"          identifier = entry.resource.identifier",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 foldDown(unroll(identifier),",
						"     mapColumn(",
						"          birthDate,",
						"          gender,",
						"          id,",
						"          lastUpdated,",
						"          telecom,",
						"          systemIdentifier = identifier.system,",
						"          valueIdentifier = identifier.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenIdentifier",
						"flattenIdentifier pivot(groupBy(gender,",
						"          birthDate,",
						"          id,",
						"          lastUpdated,",
						"          telecom),",
						"     pivotBy(systemIdentifier),",
						"     {} = case(!isNull(first(valueIdentifier)),1,0),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1 derive({urn:facebook} = toBoolean(byName('urn:facebook')),",
						"          {urn:google} = toBoolean(byName('urn:google')),",
						"          {urn:zalo} = toBoolean(byName('urn:zalo'))) ~> MapDrifted1",
						"MapDrifted1 foldDown(unroll(telecom),",
						"     mapColumn(",
						"          gender,",
						"          birthDate,",
						"          id,",
						"          lastUpdated,",
						"          {urn:facebook},",
						"          {urn:google},",
						"          {urn:zalo},",
						"          telecomPeriod = telecom.period.start,",
						"          telecomSystem = telecom.system,",
						"          telecomUse = telecom.use,",
						"          telecomValue = telecom.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          gender as string,",
						"          birthDate as date,",
						"          id as short,",
						"          lastUpdated as string,",
						"          {urn:facebook} as boolean,",
						"          {urn:google} as boolean,",
						"          {urn:zalo} as boolean,",
						"          telecomPeriod as string,",
						"          telecomSystem as string,",
						"          telecomUse as string,",
						"          telecomValue as string",
						"     ),",
						"     format: 'delimited',",
						"     fileSystem: 'fhir',",
						"     folderPath: 'fhir-dev.psi-mis.org/patient',",
						"     truncate: true,",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          gender,",
						"          birthDate,",
						"          id,",
						"          lastUpdated,",
						"          {urn:facebook},",
						"          {urn:google},",
						"          {urn:zalo},",
						"          telecomPeriod,",
						"          telecomSystem,",
						"          telecomUse,",
						"          telecomValue",
						"     )) ~> sinkDevelopmentPatient"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_patient_fhir_v2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adls_raw",
								"type": "LinkedServiceReference"
							},
							"name": "srcPatient"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adls_development",
								"type": "LinkedServiceReference"
							},
							"name": "sinkDevelopmentDataLake"
						}
					],
					"transformations": [
						{
							"name": "selectPatientData"
						},
						{
							"name": "flattenIdentifier"
						},
						{
							"name": "pivotChannels"
						},
						{
							"name": "MapDriftedNewColumns",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "flattenTelecom"
						}
					],
					"scriptLines": [
						"parameters{",
						"     date as integer",
						"}",
						"source(output(",
						"          active as boolean,",
						"          address as (city as string, country as string, line as string[], postalCode as integer, state as string)[],",
						"          birthDate as date,",
						"          communication as (language as (coding as (code as string, display as string, system as string)[], text as string), preferred as boolean)[],",
						"          extension as (url as string, valueCodeableConcept as (coding as (code as string, display as string, system as string)[]))[],",
						"          gender as string,",
						"          id as short,",
						"          identifier as (period as (start as string), system as string, use as string, value as string)[],",
						"          meta as (lastUpdated as string, profile as string[], source as string, versionId as short),",
						"          name as (family as string, given as string[], text as string, use as string)[],",
						"          resourceType as string,",
						"          telecom as (period as (start as string), system as string, use as string, value as string)[],",
						"          text as (div as string, status as string)",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fhir',",
						"     folderPath: 'fhir.psi-mis.org/Patient',",
						"     fileName: (concat(toString($date), '.json')),",
						"     documentForm: 'arrayOfDocuments') ~> srcPatient",
						"srcPatient select(mapColumn(",
						"          birthDate,",
						"          gender,",
						"          id,",
						"          identifier,",
						"          lastUpdated = meta.lastUpdated,",
						"          telecom",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPatientData",
						"selectPatientData foldDown(unroll(identifier),",
						"     mapColumn(",
						"          birthDate,",
						"          gender,",
						"          id,",
						"          lastUpdated,",
						"          telecom,",
						"          systemIdentifier = identifier.system,",
						"          valueIdentifier = identifier.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenIdentifier",
						"flattenIdentifier pivot(groupBy(gender,",
						"          birthDate,",
						"          id,",
						"          lastUpdated,",
						"          telecom),",
						"     pivotBy(systemIdentifier),",
						"     {} = case(!isNull(first(valueIdentifier)),1,0),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivotChannels",
						"pivotChannels derive({urn:facebook} = toInteger(byName('urn:facebook')),",
						"          {urn:google} = toInteger(byName('urn:google')),",
						"          {urn:zalo} = toInteger(byName('urn:zalo'))) ~> MapDriftedNewColumns",
						"MapDriftedNewColumns foldDown(unroll(telecom),",
						"     mapColumn(",
						"          gender,",
						"          birthDate,",
						"          id,",
						"          lastUpdated,",
						"          {urn:facebook},",
						"          {urn:google},",
						"          {urn:zalo},",
						"          telecomPeriod = telecom.period.start,",
						"          telecomSystem = telecom.system,",
						"          telecomUse = telecom.use,",
						"          telecomValue = telecom.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenTelecom",
						"flattenTelecom sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'fhir',",
						"     folderPath: (concat('fhir.psi-mis.org/Patient/',toString($date))),",
						"     truncate: true,",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkDevelopmentDataLake"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_qr_flatten')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adls_curated",
								"type": "LinkedServiceReference"
							},
							"name": "srcQR"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adls_development",
								"type": "LinkedServiceReference"
							},
							"name": "sinkDevelopment"
						}
					],
					"transformations": [
						{
							"name": "unpivotValues"
						},
						{
							"name": "pivotDataValues"
						},
						{
							"name": "selectFields"
						},
						{
							"name": "MapDriftedColumns",
							"description": "Creates an explicit mapping for each drifted column"
						}
					],
					"scriptLines": [
						"parameters{",
						"     date as integer",
						"}",
						"source(output(",
						"          id as short,",
						"          item as string,",
						"          lastUpdated as string,",
						"          patientId as short,",
						"          valueDateTime as string,",
						"          valueDecimal as string,",
						"          valueString as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fhir',",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:[(concat('fhir.psi-mis.org/QuestionnaireResponse/',toString($date),'/*.json'))]) ~> srcQR",
						"srcQR unpivot(output(",
						"          valueType as string,",
						"          value as string",
						"     ),",
						"     ungroupBy(patientId,",
						"          id,",
						"          item,",
						"          lastUpdated),",
						"     lateral: true,",
						"     ignoreNullPivots: true) ~> unpivotValues",
						"selectFields pivot(groupBy(id,",
						"          lastUpdated,",
						"          patientId),",
						"     pivotBy(item),",
						"     {} = first(value),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivotDataValues",
						"unpivotValues select(mapColumn(",
						"          patientId,",
						"          id,",
						"          item,",
						"          lastUpdated,",
						"          value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFields",
						"pivotDataValues derive({Action Type} = toString(byName('Action Type')),",
						"          CTA = toString(byName('CTA')),",
						"          {Duration Seconds} = toString(byName('Duration Seconds')),",
						"          Encounter = toString(byName('Encounter')),",
						"          {End DateTime} = toString(byName('End DateTime')),",
						"          {Have you bought a self test kit?} = toString(byName('Have you bought a self test kit?')),",
						"          Locale = toString(byName('Locale')),",
						"          Location = toString(byName('Location')),",
						"          {Start DateTime} = toString(byName('Start DateTime')),",
						"          {Where did you buy your test kit from?} = toString(byName('Where did you buy your test kit from?'))) ~> MapDriftedColumns",
						"MapDriftedColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'fhir',",
						"     folderPath: (concat('fhir.psi-mis.org/QuestionnaireResponse/', toString($date),'/')),",
						"     truncate: true,",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkDevelopment"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_questionnaire_curated')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adls_raw",
								"type": "LinkedServiceReference"
							},
							"name": "srcQuestionarie"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adls_curated",
								"type": "LinkedServiceReference"
							},
							"name": "sinkCurantes"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "isPatient"
						},
						{
							"name": "GetQA"
						},
						{
							"name": "flatResult"
						}
					],
					"scriptLines": [
						"source(output(",
						"          entry as (fullUrl as string, resource as (author as (reference as string), authored as string, contained as (id as string, identifier as (system as string, type as (text as string), value as string)[], intent as string, requester as (reference as string), resourceType as string, status as string, subject as (reference as string))[], encounter as (reference as string), id as short, item as ({_linkId} as (fhir_comments as string[]), answer as (valueDateTime as string, valueDecimal as double, valueString as string)[], item as (answer as (item as ({_linkId} as (fhir_comments as string[]), item as ({_linkId} as (fhir_comments as string[]), answer as (valueCoding as (code as boolean, system as string))[], linkId as string)[], linkId as string)[], valueCoding as (code as boolean, display as boolean, system as string))[], linkId as double)[], linkId as boolean, text as string)[], meta as (lastUpdated as string, profile as string[], source as string, versionId as short), resourceType as string, source as (identifier as (value as short), type as string), status as string, text as (div as string, status as string)), search as (mode as string))[],",
						"          id as string,",
						"          link as (relation as string, url as string)[],",
						"          meta as (lastUpdated as string),",
						"          resourceType as string,",
						"          total as short,",
						"          type as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'fhir',",
						"     folderPath: 'fhir-dev.psi-mis.org/questionnaire_response',",
						"     fileName: '2022-07-31-questionnaire_response.json',",
						"     documentForm: 'arrayOfDocuments') ~> srcQuestionarie",
						"srcQuestionarie foldDown(unroll(entry),",
						"     mapColumn(",
						"          lastUpdated = entry.resource.meta.lastUpdated,",
						"          type = entry.resource.source.type,",
						"          patientId = entry.resource.source.identifier.value,",
						"          id = entry.resource.id,",
						"          item = entry.resource.item",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 split(type=='Patient',",
						"     disjoint: false) ~> isPatient@(isPatient, noPatient)",
						"isPatient@isPatient foldDown(unroll(item),",
						"     mapColumn(",
						"          type,",
						"          patientId,",
						"          item,",
						"          lastUpdated,",
						"          id",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> GetQA",
						"GetQA foldDown(unroll(item.answer),",
						"     mapColumn(",
						"          patientId,",
						"          item = item.text,",
						"          answer = item.answer,",
						"          lastUpdated,",
						"          id",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatResult",
						"flatResult sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'fhir',",
						"     folderPath: 'fhir-dev.psi-mis.org/questionnaire_response',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          patientId,",
						"          item,",
						"          valueDateTime = answer.valueDateTime,",
						"          valueDecimal = answer.valueDecimal,",
						"          valueString = answer.valueString,",
						"          lastUpdated,",
						"          id",
						"     )) ~> sinkCurantes"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_extract_configuration')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Call export fhir api",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://fhir.psi-mis.org/fhir/$export?_type=Patient,QuestionnaireResponse",
							"method": "GET",
							"headers": {
								"Prefer": "respond-async"
							},
							"authentication": {
								"type": "Basic",
								"username": "admin",
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "ls_keys_fhir",
										"type": "LinkedServiceReference"
									},
									"secretName": "fhir-vn"
								}
							}
						}
					},
					{
						"name": "Get value location",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Call export fhir api",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "location",
							"value": {
								"value": "@split(activity('Call export fhir api').output.ADFWebActivityResponseHeaders['Content-Location'],'$')[1]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy config file",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get value location",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_fhir_config_export",
								"type": "DatasetReference",
								"parameters": {
									"relativeURL": {
										"value": "@concat('$',variables('location'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_config_export",
								"type": "DatasetReference",
								"parameters": {
									"date": {
										"value": "@pipeline().parameters.date",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"date": {
						"type": "string"
					}
				},
				"variables": {
					"location": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_extract_fhir_resources')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Values",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_adls_config_export",
								"type": "DatasetReference",
								"parameters": {
									"date": {
										"value": "@pipeline().parameters.date",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Config Values",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Config Values').output.value[0].output",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy FHIR resource to data lake",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings",
												"filePattern": "arrayOfObjects"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_fhir_resource_json",
											"type": "DatasetReference",
											"parameters": {
												"relativeURL": {
													"value": "@item().url",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls_resorce_json",
											"type": "DatasetReference",
											"parameters": {
												"type2": {
													"value": "@item().type",
													"type": "Expression"
												},
												"date": {
													"value": "@pipeline().parameters.date",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"date": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_extract_patient')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Patient from FHIR server to ADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_fhir_patient_json",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_patient_json",
								"type": "DatasetReference",
								"parameters": {
									"date": {
										"value": "@pipeline().parameters.date",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "old"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_extract_questionnaire')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Questionnaire from FHIR server to ADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_fhir_questionnaire_response_json",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_questionnaire_response_json",
								"type": "DatasetReference",
								"parameters": {
									"date": {
										"value": "@pipeline().parameters.date",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "old"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_load_dwh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Patient",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat('fhir.psi-mis.org/Patient/',pipeline().parameters.date)",
										"type": "Expression"
									},
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from Patient",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "birthDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "birthDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "gender",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "gender",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "lastUpdated",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "lastUpdated",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "urn:facebook",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "urn:facebook",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "urn:zalo",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "urn:zalo",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "urn:google",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "urn:google",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "telecomPeriod",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "telecomPeriod",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "telecomSystem",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "telecomSystem",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "telecomUse",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "telecomUse",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "telecomValue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "telecomValue",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adls_development_patient_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_patient",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy QR",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Patient",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat('fhir.psi-mis.org/QuestionnaireResponse/',pipeline().parameters.date)",
										"type": "Expression"
									},
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from QuestionnaireResponse",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "lastUpdated",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "lastUpdated",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "patientId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "patient_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Action Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Action Type",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CTA",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CTA",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Duration Seconds",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Duration Seconds",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Encounter",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Encounter",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "End DateTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "End DateTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Locale",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Locale",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Location",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Location",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Start DateTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Start DateTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adls_development_qr_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_qr",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"date": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_qr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Patient",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_patient_fhir_v2",
								"type": "DataFlowReference",
								"parameters": {
									"date": {
										"value": "@pipeline().parameters.date",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"srcPatient": {},
									"sinkDevelopmentDataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "QR Curate transformations",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_curating_qr",
								"type": "DataFlowReference",
								"parameters": {
									"date": {
										"value": "@pipeline().parameters.date",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"srcQR": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Flatten QR",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "QR Curate transformations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_qr_flatten",
								"type": "DataFlowReference",
								"parameters": {
									"date": {
										"value": "@pipeline().parameters.date",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"srcQR": {},
									"sinkDevelopment": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"date": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_patient_fhir_v2')]",
				"[concat(variables('factoryId'), '/dataflows/df_curating_qr')]",
				"[concat(variables('factoryId'), '/dataflows/df_qr_flatten')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_transform_patient')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_patient",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcPatient": {},
									"sinkDevelopmentPatient": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "old"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_patient')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_transform_questionnaire_curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_questionnaire_curated",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcQuestionarie": {},
									"sinkCurantes": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "old"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_questionnaire_curated')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_transform_questionnaire_curated_v2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcQuestionnaire": {},
									"sinkQuestionnaire": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "old"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_execution')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pl_extract_configuration",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_extract_configuration",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date": {
									"value": "@pipeline().parameters.date",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pl_extract_fhir_resources",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_extract_configuration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_extract_fhir_resources",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date": {
									"value": "@pipeline().parameters.date",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pl_transform",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_extract_fhir_resources",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date": {
									"value": "@pipeline().parameters.date",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pl_load_dwh",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_load_dwh",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date": {
									"value": "@pipeline().parameters.date",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"date": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_extract_configuration')]",
				"[concat(variables('factoryId'), '/pipelines/pl_extract_fhir_resources')]",
				"[concat(variables('factoryId'), '/pipelines/pl_transform')]",
				"[concat(variables('factoryId'), '/pipelines/pl_load_dwh')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_daily_10am_cet')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_execution",
							"type": "PipelineReference"
						},
						"parameters": {
							"date": "[parameters('tr_daily_10am_cet_properties_pl_execution_parameters_date')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2022-10-22T04:00:00",
						"timeZone": "Romance Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_execution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_test')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_execution",
							"type": "PipelineReference"
						},
						"parameters": {
							"date": "[parameters('tr_test_properties_pl_execution_parameters_date')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2022-11-23T10:24:00",
						"timeZone": "SE Asia Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_execution')]"
			]
		}
	]
}